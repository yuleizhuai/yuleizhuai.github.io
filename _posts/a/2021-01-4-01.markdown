---
layout:     post
title:      "架构大作业"
subtitle:   "作者：于磊 来自：极客大学架构师训练营"
date:       2021-01-04 00:00:00
author:     "于磊"
header-img: "img/a/index1.png"
catalog: true
tags:
    - 极客大学
    - 架构师




---





## 作业一：

已上传至 [Github](https://github.com/yuleizhuai/yuleizhuai.github.io/blob/master/img/a/%E9%80%9A%E8%BE%BE%E7%89%A9%E6%B5%81%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.pdf) 链接：https://github.com/yuleizhuai/yuleizhuai.github.io/blob/master/img/a/%E9%80%9A%E8%BE%BE%E7%89%A9%E6%B5%81%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.pdf



## 作业二：根据当周学习情况，完成一篇学习总结

![极客食堂就餐卡系统-部署图](/img/a/01/第 1 周架构方法.png)

![极客食堂就餐卡系统-组件图](/img/a/02/第 2 周框架设计 2.1 从编程历史看面向对象编程的本质与未来.png)

![极客食堂就餐卡系统-组件图](/img/a/02/2.2 设计臭味：糟糕的代码有哪些特点？.png)

![极客食堂就餐卡系统-组件图](/img/a/02/2.3 开闭原则介绍代码分析.png)

![极客食堂就餐卡系统-组件图](/img/a/02/2.4 依赖倒置原则介绍及代码案例分析.png)

![极客食堂就餐卡系统-组件图](/img/a/02/2.5 里氏替换原则.png)

![极客食堂就餐卡系统-组件图](/img/a/02/2.6 单一职责原则（SRP）.png)

![第 4 周 系统架构](/img/a/04/第 4 周 系统架构.png)

![4.1 系统架构：系统技术挑战与方案](/img/a/04/4.1 系统架构：系统技术挑战与方案.png)

![4.2 分布式架构演化](/img/a/04/4.2 分布式架构演化.png)

![第 5 周 技术选型（一）](/img/a/05/第 5 周 技术选型（一）.png)

![5.1 分布式缓存架构：架构原理与使用中的注意事项](/img/a/05/5.1 分布式缓存架构：架构原理与使用中的注意事项.png)

![5.2 分布式缓存架构：常见的缓存实现形式](/img/a/05/5.2 分布式缓存架构：常见的缓存实现形式.png)

![5.3 分布式缓存架构：一致性 Hash 算法](/img/a/05/5.3 分布式缓存架构：一致性 Hash 算法.png)

![5.4 消息队列：如何避免系统故障传递？](/img/a/05/5.4 消息队列：如何避免系统故障传递？.png)

![第 6 周技术选型（二）](/img/a/06/第 6 周技术选型（二）.png)

![6.1 分布式关系数据库（上）](/img/a/06/6.1 分布式关系数据库（上）.png)

![6.2 分布式关系数据库（下）](/img/a/06/6.2 分布式关系数据库（下）.png)

![6.3 CAP原理与 NoSQL数据库架构](/img/a/06/6.3 CAP原理与 NoSQL数据库架构.png)

![6.3 ZooKeeper 与分布式一致性架构](/img/a/06/6.3 ZooKeeper 与分布式一致性架构.png)

![6.4 搜索引擎的基本架构](/img/a/06/6.4 搜索引擎的基本架构.png)

![目录](/img/a/07/目录.png)

![7.1 性能测试：系统性能的主要技术指标](/img/a/07/7.1 性能测试：系统性能的主要技术指标.png)

![7.2 全链路压测的挑战](/img/a/07/7.2 全链路压测的挑战.png)

![7.3 性能优化：系统性能优化的分层思想](/img/a/07/7.3 性能优化：系统性能优化的分层思想.png)

![7.4 操作系统：计算机如何处理成百上千的并发请求？](/img/a/07/7.4 操作系统：计算机如何处理成百上千的并发请求？.png)

![7.5 锁：锁原语 CAS 与各类锁](/img/a/07/7.5 锁：锁原语 CAS 与各类锁.png)

![目录](/img/a/08/目录.png)

![8.1 如何把硬盘的读写速度提高十万倍？](/img/a/08/8.1 如何把硬盘的读写速度提高十万倍？.png)

![8.2 常见数据结构与 Hash 表原理分析](/img/a/08/8.2 常见数据结构与 Hash 表原理分析.png)

![8.3 红黑树原理与性能特性](/img/a/08/8.3 红黑树原理与性能特性.png)

![8.4 经典算法](/img/a/08/8.4 经典算法.png)

![8.5 网络通信基本原理与性能优化](/img/a/08/8.5 网络通信基本原理与性能优化.png)

![目录](/img/a/09/目录.png)

![9.1 数据库的基本原理](/img/a/09/9.1 数据库的基本原理.png)

![9.2 JVM 虚拟机架构原理](/img/a/09/9.2 JVM 虚拟机架构原理.png)

![9.3 JVM 垃圾回收性能分析](/img/a/09/9.3 JVM 垃圾回收性能分析.png)

![9.4 Java 代码优化技巧及原理](/img/a/09/9.4 Java 代码优化技巧及原理.png)

![9.5 系统性能优化案例：秒杀系统](/img/a/09/9.5 系统性能优化案例：秒杀系统.png)

![目录](/img/a/10/目录.png)

![10.1 微服务：服务本身的设计、维护以及治理](/img/a/10/10.1 微服务：服务本身的设计、维护以及治理.png)

![10.2 微服务：落地实践的策略与思路](/img/a/10/10.2 微服务：落地实践的策略与思路.png)

![10.3 微服务网关的技术架构](/img/a/10/10.3 微服务网关的技术架构.png)

![10.4 领域驱动设计 DDD](/img/a/10/10.4 领域驱动设计 DDD.png)

![10.5 软件组件设计原则](/img/a/10/10.5 软件组件设计原则.png)

![10.6 案例：用领域驱动设计驱动系统重构](/img/a/10/10.6 案例：用领域驱动设计驱动系统重构.png)

![目录](/img/a/11/目录.png)

![11.1 安全架构：Web 攻击与防护](/img/a/11/11.1 安全架构：Web 攻击与防护.png)

![11.2 安全架构：加密与解密](/img/a/11/11.2 安全架构：加密与解密.png)

![11.3 安全架构：反垃圾与风控](/img/a/11/11.3 安全架构：反垃圾与风控.png)

![11.4 高可用：可用性度量](/img/a/11/11.4 高可用：可用性度量.png)

![11.5 高可用：提升系统可用性的架构方案](/img/a/11/11.5 高可用：提升系统可用性的架构方案.png)

![目录](/img/a/12/目录.png)

![12.1 大数据原理概述](/img/a/12/12.1 大数据原理概述.png)

![12.2 分布式文件系统 HDFS](/img/a/12/12.2 分布式文件系统 HDFS.png)

![12.3 大数据计算框架 MapReduce - 编程模型](/img/a/12/12.3 大数据计算框架 MapReduce - 编程模型.png)

![12.4 大数据计算框架 MapReduce - 架构](/img/a/12/12.4 大数据计算框架 MapReduce - 架构.png)

![12.5 大数据集群资源管理系统 Yarn](/img/a/12/12.5 大数据集群资源管理系统 Yarn.png)

![12.6 大数据仓库 Hive](/img/a/12/12.6 大数据仓库 Hive.png)

![目录](/img/a/13/目录.png)

![13.1 大数据计算引擎 Spark](/img/a/13/13.1 大数据计算引擎 Spark.png)

![13.3 流处理计算：Flink, Storm, Spark Streaming](/img/a/13/13.3 流处理计算：Flink, Storm, Spark Streaming.png)

![13.4 大数据基准测试工具 HiBench](/img/a/13/13.4 大数据基准测试工具 HiBench.png)

![13.5 大数据分析与可视化](/img/a/13/13.5 大数据分析与可视化.png)