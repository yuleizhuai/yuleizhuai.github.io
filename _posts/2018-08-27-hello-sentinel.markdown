---
layout:     post
title:      "关于 Sentinel 的导图整理"
subtitle:   "分布式系统的流量防卫兵"
date:       2018-08-27 19:58:11
author:     "于磊"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Sentinel
    - 阿里中间件
---



### 脑图 [【点我下载】](https://github.com/yuleizhuai/resources/blob/master/technology/Sentinel/Sentinel.pdf)

![Sentinel](/img/sentinel/Sentinel.jpg)





### 痛点

当服务量大道一定程度，流量扛不住的时候，该如何处理？

应用之间相互依赖，当应用 A 出现响应时间过长，影响到应用 B 的响应，进而产生连锁反应影响整个依赖链上的所有应用，该如何处理？



### 产生背景

在过去的10多年里，阿里巴巴投入了集团大量的精英人力用于提升淘宝、天猫平台服务的稳定性

正是有了多年来上万名阿里技术人才的持续创新和技术沉淀，在一系列秒杀大促中，特别是双11这样现象级的电商大促中，才打造出了今天大家所看到的可轻松应对双11的平台稳定体系

包括限流和降级、流量调度、业务开关、容量压测和评估、全链路压测、业务一致性平台等

Sentinel是在这种背景下产生的限流降级框架，目前已接入集团几乎所有的核心应用。



### 介绍

随着微服务的流行，服务和服务之间的稳定性变得越来越重要。

Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。

Sentinel 作为阿里巴巴“大中台、小前台”架构中的基础模块，覆盖了阿里的所有核心场景，也因此积累了大量的流量规整场景以及生产实践。

Sentinel 的理念是无缝对接 Dubbo 大生态，和 Dubbo、Nacos等阿里中间件开源产品紧密结合，支持一键使用，并且全面拥抱开源生态，例如会对 grpc，Rest Service主流框架进行积极适配并开放出来，同时提供一系列 API 给到开发者，用于定制自己的需求，



### 解决问题

#### 限流

- 当我们设计了一个函数，准备上线，这时候这个函数会消耗一些资源，处理上限是1秒服务3000个 QPS，但如果实际情况遇到高于3000的 QPS 该如何解决呢?
- Sentinel 提供了两种流量统计方式，一种是统计并发线程数，另外一种则是统计 QPS，当并发线程数超出某个设定的阀值，新的请求会被立即拒绝，当 QPS 超出某个设定的阀值，系统可以通过直接拒绝、冷启动、匀速器三种方式来应对，从而起流量控制的作用。

#### 熔断降级

- 接触过 Spring Cloud、Service Mesh的同学，都知道熔断降级的概念。
- 服务之间会有相互依赖关系，例如服务 A 做到了1秒上万个 QPS，但这时候服务 B 并无法满足1秒上万个 QPS，那么如何保证服务 A 在高频调用服务 B 时，服务 B 仍能正常工作呢？
- 一种比较常见的情况是，服务 A 调用服务 B 时，服务 B 因无法满足高频调用出现响应时间过程的情况，导致服务 A 也出现响应过长的情况，进而产生连锁反应影响整个依赖链上的所有应用，这时候就需要熔断和降级的方法。
- Sentinel 通过并发线程数进行限制和响应时间对资源进行降级两种手段来对服务进行熔断或降级

#### 塑形

- 通常我们遇到的流量具有随机性、不规则、不受控的特点，但系统的处理能力往往是有限的，我们需要根据系统的处理能力对流量进行塑形，即规则化，从而根据我们的需要来处理流量。
- Sentinel 通过资源的调用关系、运行指标、控制的效果三个维度来对流量进行控制，开发者可以自行灵活组合，从而达到理想的效果

#### 系统负载保护

- 平时系统运行都没问题，但遇到大促的时候，发现机器的load 非常高，这时候对系统的负载保护就显得非常重要，以防止雪崩。
- Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。
- Sentinel 在系统负载保护方面的判断机制是根据系统能够处理的请求，和允许进来的请求，来做平衡，而不是根据一个间接的指标（系统 load）来做限流。
- 因为我们最终追求的目标是在系统不被拖延的情况下，提高系统的吞吐率，而不是 load 一定要低于某个阀值。

### 模块

核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java运行时环境，同时对 Dubbo、Spring Cloud 等框架也有较好的支持

控制台（Dashboard）基于 Spring Boot 开发，打包台可以直接运行，不需要额外的 Tomcat等应用容器



### 最佳实践

#### Dubbo Service

- Sentinel 的适配器捐给了 Dubbo
- 开发者进入了 Dubbo Sentinel，就能立即实现实时秒级监控的功能
- 监控提供单机链路维度和单机平铺维度，还提供汇总维度的监控，非常方便
- 当我们浏览一件商品时，背后可能应对着上百个服务，例如商品属性、商品库存、个人信息、评价信息、店铺信息、商品优惠、订单信息、交易信息、推荐信息等等，这类场景
- 我们可以由两个维度来看 Sentinel 在 Dubbo Service 中的实践，一个是从服务提供方 Service provider 如何限流，例如在百个服务中要保证交易服务可以正常处理，那就可以通过容量或者并发量来限流
- 一个是从服务调用方 Service caller 如何限流，则可以通过熔断降级来限流

#### Rocket MQ消息中间件

- 图中红色曲线是表示实际的消息流量，红色区域是超出我们处理能力的消息流量，这时候借助 Sentinel 对流量实施削峰填谷，把红色流量放到系统不太繁忙的时候再来处理，注意既不会丢失流量的请求，也不会对用户的购物体验产生影响
- 这类处理在电商的订单处理等环节很常见
- 在Rocket MQ 的服务端，消息的分发者则可以通过 Sentinel匀速的对外发送请求
- 这个最佳实践，我们也捐给了 Apache RocketMQ，目前正在合并，大家很快就可以看到

#### Nacos

- Sentinel和 Nacos类似，是以 Dubbo大生态中的核心组件的身份来对外开源的，目的是帮助开发者获得更完整的分布式服务解决方案

- 例如当我们限流的流量发生变化的时候，我们需要迅速推规则的时候，Sentinel可以和 Nacos相互整合，起到快速操作、快速配送的效果


### 特征

#### 丰富的应用场景

- Sentinel 承接了阿里巴巴近10年的双十一大促流量的核心场景，例如秒杀，即突发流量控制在系统容量可以承受的范围
- 消息削峰填谷
- 实时熔断下游不可用应用

#### 完备的监控功能

- Sentinel 同时提供最实时的监控功能，你可以在控制台看到接入应用的单台机器秒级数据，甚至500台以下规模的集群的汇总运行情况

#### 简单易用的扩展点

- Sentinel提供简单易用的扩展点，你可以通过实现扩展点，快速的定制逻辑

- 例如定制规则管理，适配数据源


### 特点

#### 轻巧

- 对性能影响小和对应于零入侵
- 限流框架是寄宿在应用上的，这时候要求限流框架不能对系统资源有过多的消耗
- 就像汽车上的安全气囊如果会耗油、导致汽车跑得慢，就不是一个好气囊
- Sentinel 的接入对系统资源的消耗极少
- 除了对性能的影响要优化到最低之外，还有一个特征，就是需要保证他对应用的零入侵
- 零入侵是让开发者几乎意识不到这个框架的存在
- 如果让开发者一边开发，一边还要想着限流降级，这就非常累了
- 优秀的限流就像是汽车上的安全气囊，平时系统工作正常的时候我们感受不到他的存在，只有当系统出现无法应对当前流量的时候，才会出现，这就是对应用零入侵的体现，开发者无需关心如何接入流量框架，便可调用服务
- Sentinel 通过对主流框架，例如 Dubbo、Spring Cloud，grpc等，进行默认适配，只要接入适配器，默认的资源就有了
- 如果不是用主流框架，也没有关系，只需要很简单，差不多3步，就可以接入，之后还会提供 Anotation，让用户更简单的用起来

#### 专业

- 不同的场景下有不同的限流需求
- 在什么时候减流量，流量减多了影响用户体验、流量减少了影响系统稳定性，陡峭高峰如何限流、削峰填谷如何限流，这里就涉及到限流的算法
- 不同于Hystrix 只提供一两个维度的限流方式，Sentinel 提供了一个灵活的框架，从不同的维度出发，开发者可以根据自身的场景去制定自己的限流策略

#### 实时监控

- 流量具有很强的实时性，之所需要限流，是因为我们无法对流量的到来作出精确的判断，不然的话我们完全可以通过弹性的计算资源来处理，所有这时候限流框架的实时监控功能就非常重要了
- Sentinel的实时监控功能，运维人员可以根据实际流量情况，采取不同的措施，限流、降级、塑形、系统保护，所以我们第一版开源版本中，我们加入了 Sentinel 的控制台，具备实时监控功能

