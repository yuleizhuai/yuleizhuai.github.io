---
layout:     post
title:      "关于 Nacos 的整理"
subtitle:   "动态服务发现、配置管理和服务管理平台"
date:       2018-08-29 12:18:22
author:     "于磊"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Nacos
    - 阿里中间件
    - Java
---





### 脑图 [【点我下载】](https://github.com/yuleizhuai/resources/blob/master/technology/Nacos/Nacos.pdf)

![Nacos](/img/nacos/Nacos.jpg)



### 全景图

![Nacos](/img/nacos/Nacos_all.png)



### 描述

一个更易于构建云原生应用的

动态服务发现、配置管理和服务管理平台

### 愿景

Nacos 通过提供简单易用的动态服务发现、服务配置、服务共享与管理等服务基础设施，帮助用户在云原生时代，在私有云、混合云或者公有云等所有云环境中，更好的构建、交付、管理自己的微服务平台，更快的复用和组合业务服务，更快的交付商业创新的价值，从而为用户赢得市场

### 概览

Nacos 致力于帮助你发现、配置和管理微服务

Nacos 提供了一组简单易用的特性集，帮助您实现动态服务发现、服务配置管理、服务及流量管理

Nacos 帮助你更敏捷和管理地构建、交付和管理微服务平台

Nacos 是构建以“服务”为中心的现代应用架构的服务基础设施（例如微服务范式、云原生范式）

### 功能

#### 动态配置服务

- 动态配置服务让你能够以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置
- 动态配置消除了配置变更时重新部署应用和服务的需要，让配置变得更加高效和敏捷
- 配置中心化管理让实现无状态服务更简单，也服务让按需弹性扩展服务更容易
- Nacos 提供了一个简单易用的 UI TODO 帮助你管理所有的服务和应用的配置
- Nacos 还提供包括配置版本跟踪、金丝雀发布、回滚配置以及客户进程配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助你更安全地管理配置变更和控制配置变更的风险

#### 服务发现及管理（健康监测）

- 动态服务发现对以服务为中心的应用架构方式非常关键。（例如微服务和云原生）
- Nacos支持 DNS-Based和 RPC-Based（Dubbo、gRPC）模式的服务发现
- Nacos也提供实时健康检查，以防止将请求发往不健康的主机或服务实例
- 借助Nacos，您可以更容易地为您的服务实现断路器
- 服务提供者使用原生 SDK、OpenAPI、或一个独立的 Agent TODO 注册 Service后，服务消费者可以使用 DNS TODO 或 HTTP & API TODO 查找和发现服务
- Nacos 提供实时监控检查，阻止服务向不健康的主体或服务实例发送请求
- Nacos 支持传输层（PIND 或 TCP）和应用层（如 HTTP、Redis、MySQL、用户自定义）的监控检查
- 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘服务等）服务的健康检查，Nacos 提供了 agent模式和服务端2种健康检查模式
- Nacos 还提供统一的健康检查仪表盘，帮助你管理服务的可用性及流量

#### 动态 DNS 服务

- 支持权重路由，动态 DNS 服务能让你轻松实现中间层负载均衡、更灵活的路由策略、流量控制以及简单数据中心内网的简单 DNS 解析服务
- 动态DNS 服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以消除耦合到厂商私有服务发现 API 上的风险
- Nacos 提供了一些简单的 DNS APIs TODO 帮助你管理服务的关联域名和可用的 IP:PORT 列表

#### 服务及其元数据管理

- Nacos 能让你从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 Metrics 统计数据

### 特性

#### 易于使用

- 动态配置管理、服务发现和动态的一站式解决方案
- 20多种开箱即用的以服务为中心的架构特性
- 基本符合生产要求的轻量级易于控制台

#### 更适应云架构

- 无缝支持 Kubernetes 和 Spring Cloud
- 在主流公共云上更容易部署和运行（例如阿里云和 AWS）
- 多租户和多环境支持

#### 生产等级

- 脱胎于历经阿里巴巴10年生产验证的内部产品
- 支持具有数百万服务的大规模场景
- 具备企业级 SLA 的开源产品

#### 丰富的应用场景

- 支持限流、大促销预案和异地多活
- 直接支持或稍作扩展即可支持大量游泳的互联网应用场景
- 流量调度和服务治理

### 架构

#### 基本架构

- 架构图

  ![Nacos](/img/nacos/Nacos_architecture.png)

#### 构建物、部署及启动模式

![Nacos](/img/nacos/Nacos_start.png)

- 2种交付工件
  - Nacos 支持标准 Docker 镜像（TODO:0.2版本开始支持）及 zip（tar.gz）压缩包的构建物
- 启动模式
  - Nacos 支持将注册中心（Service Registry）与配置中心（Config Center）在一个进程合并部署或者将2者分离部署的两种模式
- 免费的公有云服务模式
  - 除了你自己部署和启动 Nacos 服务之外，在云计算时代，Nacos 也支持公有云模式，在阿里云公有云的商业产品（如 ACM TODO, EDAS TODO）中会提供 Nacos的免费的公有云服务
  - 我们也欢迎和支持其他的公有云提供商提供 Nacos的公有云服务

### 计划

我们计划从 Nacos 0.8.0 开始将其做到生产可用状态。在这个版本之前，我们建议您仅将其用于开发和测试环境。我们目前的计划是努力在未来6~8个月内将 Nacos 演进到生产可用的版本。当然计划可能因为各种因素影响而做调整，包括根据社区的声音进行优先级调整等，但整体应该不会超过1年的时间。

#### Nacos 1.0

- 构建简单易用的，服务相关的工具集，包括服务发现、配置管理、服务元数据存储、推送、一致性及元数据管理等
- 与包括 Spring Cloud、Kubernetes、Dubbo等开源生态做无缝的融合与支持，同时给这些生态带来很多面向生产时需要的优秀特性

#### Nacos 2.0

- 主要关注在统一服务管理、服务共享及服务治理体系的开放的服务平台的建设上，主要包括两个方面

- Dubbo 4.0 + Nacos 2.0 开放的服务平台

  ![Nacos](/img/nacos/dubbo.png)

- Kubernetes + Spring Cloud 统一服务管理

  ![Nacos](/img/nacos/kubernetes_springcloud.png)

### 概念

#### 地域（Region）

- 物理的数据中心，资源创建成功后不能更换

#### 可用区（Available Zone）

- 同一地域内，电力和网络互相独立的物理区域。
  同一可用区内，实例的网络延迟较低。

#### 接入点（Endpoint）

- 地域的某个服务的入口域名

#### 命名空间（Namespace）

- 用于进行租户粒度的配置隔离
- 不同的命名空间下，可以存在相同的 Group 或 DataID 的配置
- Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等

#### 配置（Configuration）

- 在系统开发过程中，开发者通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在
- 目的是让静态的系统工件或者交付物（如 WAR,JAR 包等）更好地和实际的物理运行环境进行适配
- 配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成
- 配置变更时调整系统运行时的行位的有效手段

#### 配置管理（Configuration Management）

- 系统配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动

#### 配置项（Configuration Item）

- 一个具体的可配置的参数与其值域，通常以 param- key = param - value 的形式存在
- 例如我们常配置系统的日志输出级别（logLevel = INFO|WARN|ERROR）就是一个配置项

#### 配置集（Configuration Set）

- 一组相关或者不相关的配置项的集合称为配置集
- 在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置
- 例如，一个配置集可能包含了数据源、线程池、日志级别等配置项

#### 配置集ID（Data ID）

- Nacos 中的某个配置集的 ID
- 配置集 ID 是组织划分配置的维度之一
- Data ID 通常用于组织划分系统的配置集
- 一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识
- Data ID 通常采用类 Java 包（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性
- 此命名规则非强制

#### 配置分组（Group）

- Nacos 中一组配置集，是组织配置的维度之一
- 通过一个有意义的字符串（如 Buy或 Trade）对配置集进行分组，从而区分 Data ID 相同的配置集
- 当你在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP
- 配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置

#### 配置快照（Configuration Snapshot）

- Nacos 的客户端 SDK 会在本地生成配置的快照
- 当客户端无法连接到 Nacos ServerS 时，可以使用配置快照显示系统的整体容灾能力
- 配置快照类似于Git 中的本地 commit，也类似于缓存，会在适当的时机更新，但是并没有缓存过期（expiration）的概念

#### 配置服务（Configuration Service）

- 在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者

#### 服务（Service）

- 通过预定义接口网络访问的提供给客户端的软件功能
- 服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）
- Nacos 支持主流的服务生态，如 Kubernetes Service、gRPC|Dubbo RPC Service 或者 Spring Cloud RESTful Service
- 目的是让静态的系统工件或者交付物（如 WAR/JAR 包等）

#### 服务名（Service Name）

- 服务提供的标识，通过该标识可以唯一确定其指代的服务

#### 名字服务（Naming Service）

- 提供分布式系统中所有对象（Object）、实体（Entity）的名字到关联的元数据之间的映射管理服务，例如 ServiceName -> Endpoints Info, Distrubuted Lock Name -> Lock Owner/Status Info, DNS Domain Name -> IP List, 服务发现和 DNS 就是名字服务的 2大场景

#### 服务注册中心（Service Registry）

- 存储服务实例和服务负载均衡策略的数据库
- 服务注册中心，它是服务，其实涉及元数据的数据库
- 服务实例在启动时注册到服务注册表，并在关闭时注销
- 服务和路由器的客户端查询服务注册表以查找服务的可用实例
- 服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求

#### 服务元数据（Service Metadata）

- 服务元数据是指包括服务端点（endpoints）、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据

#### 服务提供方（Service Provider）

- 是指提供可复用和可调用服务的应用方

#### 服务消费方（Service Consumer）

- 是指会发起对某个服务调用的应用方

#### 服务发现（Service Discovery）

- 在计算机网络上，（通常使用服务名）对服务下的实例的地址和元数据进行探测，并以预先定义的接口提供给客户端进行查询

#### 元信息（Metadata）

- 自定义配置信息，如容灾策略、负载均衡策略、鉴权配置、各种标记对，从作用范围来看，分为服务级别的元信息、虚拟集群的元信息及实例的元信息

#### 应用（Application）

- 用于标识服务提供方的服务的属性

#### 分组（Service Group）

- 不同的服务可以归类到同一分组

#### 虚拟集群（Virtual Cluster）

- 同一个服务下的服务实例可以被进一步分类，分类单位可以是虚拟集群

#### 实例（Instance）

- 提供一个或多个服务的具有可访问网络地址（IP:Port）的进程

#### 权重（Weight）

- 实例级别的配置
- 权重为浮点数
- 权重越大，分配给该实例的流量越大

#### 健康检查（Health Check）

- 以特定方式检查服务下挂载 IP 的健康度，从而确认该 IP 是否能提供服务
- 根据检查结果，IP 会被判断为健康或不健康
- 对服务发起解析请求时，不健康的 IP 不会返回给客户端

#### 健康保护阈值（Protect Threshold）

- 为了防止因部分 IP 不健康导致流量全部流向健康 IP，继而造成流量压力把健康 IP 压垮并形成雪崩效应，应将健康保护阈值定义为一个0到1之间的浮点数
- 当域名健康 IP 占总 IP 的比例小于该值时，无论 IP 是否健康，都会讲这个 IP 返回给客户端
- 虽然损失了一部分流量，但是保证了剩余健康 IP 能正常工作

